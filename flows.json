[
    {
        "id": "828c4e44.4d8d68",
        "type": "tab",
        "label": "Coda Export",
        "disabled": false,
        "info": ""
    },
    {
        "id": "27b84f51.afdbc8",
        "type": "tab",
        "label": "Dev tools",
        "disabled": false,
        "info": ""
    },
    {
        "id": "58282c51.000474",
        "type": "tab",
        "label": "Complex geo",
        "disabled": false,
        "info": ""
    },
    {
        "id": "604b08c8.c34b58",
        "type": "tab",
        "label": "Monitor",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1a5b2cab.c12f43",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ec4f312a.87cc08",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "a1473840.d065f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 200,
                "wires": [
                    {
                        "id": "44a2b5a9.381e34",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "6940c035.8be64",
        "type": "subflow",
        "name": "Create geoJson",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 280,
                "wires": [
                    {
                        "id": "d60ca0fa.18c2d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1000,
                "y": 720,
                "wires": [
                    {
                        "id": "3ce985ba.9b74fa",
                        "port": 0
                    }
                ]
            },
            {
                "x": 800,
                "y": 1340,
                "wires": [
                    {
                        "id": "7b83f36.71d440c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "965bef54.6134d",
        "type": "subflow",
        "name": "Load Atlas config",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 180,
                "wires": [
                    {
                        "id": "a84bd229.bc2d08"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1320,
                "y": 600,
                "wires": [
                    {
                        "id": "ec9819c.b9078e8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "1321a474.225144",
        "type": "subflow",
        "name": "Taxonomy data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "14f951be.e66cae"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1220,
                "y": 440,
                "wires": [
                    {
                        "id": "e23bc4b5.7614a8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "7cc4b1a6.f5775",
        "type": "subflow",
        "name": "GeoJson generator overview",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "2425e916.fefa3e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 780,
                "y": 160,
                "wires": [
                    {
                        "id": "f16069c6.b31cc8",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "513e0f5.52bb77",
        "type": "coda-io-connection-api-token",
        "z": "",
        "name": "Atlas Token"
    },
    {
        "id": "8c585ff8.333a38",
        "type": "coda-io-connection-doc-id",
        "z": "",
        "name": "Mehringplatz-english",
        "doc_id": "Q3lMBnVcYw"
    },
    {
        "id": "93031114.a56d6",
        "type": "github-credentials",
        "z": "",
        "name": "greenman - atlas"
    },
    {
        "id": "6066dc0a.73f814",
        "type": "ui_tab",
        "z": "",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c5f3f371.dcae68",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "6066dc0a.73f814",
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7b1973aa.f0ae44",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "e22793b1.95b0f",
        "type": "coda-io-connection-doc-id",
        "z": "",
        "name": "Palermo",
        "doc_id": "WcfAWfG9io"
    },
    {
        "id": "9a3bc995.0eac1",
        "type": "coda-io-connection-doc-id",
        "z": "",
        "name": "playground",
        "doc_id": "vdo5WMIQlF"
    },
    {
        "id": "4828acda.0093dc",
        "type": "coda-io-get-data",
        "z": "6940c035.8be64",
        "limit": "500",
        "request_for": "rows",
        "name": "Get Atlas Data",
        "x": 460,
        "y": 640,
        "wires": [
            [
                "41cfd40a.77c794"
            ]
        ]
    },
    {
        "id": "41cfd40a.77c794",
        "type": "http request",
        "z": "6940c035.8be64",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 670,
        "y": 640,
        "wires": [
            [
                "1ee55380.1b1575"
            ]
        ]
    },
    {
        "id": "6505cc21.e9789c",
        "type": "split",
        "z": "6940c035.8be64",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 820,
        "wires": [
            [
                "45774fd5.a4167"
            ]
        ]
    },
    {
        "id": "1ee55380.1b1575",
        "type": "json",
        "z": "6940c035.8be64",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 850,
        "y": 640,
        "wires": [
            [
                "3ce985ba.9b74fa"
            ]
        ]
    },
    {
        "id": "a621f7da.74948",
        "type": "change",
        "z": "6940c035.8be64",
        "name": "Prepare the result rows",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.rows",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "headers",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "relationships",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 820,
        "wires": [
            [
                "6505cc21.e9789c"
            ]
        ]
    },
    {
        "id": "45774fd5.a4167",
        "type": "change",
        "z": "6940c035.8be64",
        "name": "Convert to Comma geoJson data",
        "rules": [
            {
                "t": "set",
                "p": "node.type",
                "pt": "msg",
                "to": "Feature",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "node.properties.title",
                "pt": "msg",
                "to": "payload.title",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.geometry",
                "pt": "msg",
                "to": "payload.geometry",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.type",
                "pt": "msg",
                "to": "payload.type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.start_date",
                "pt": "msg",
                "to": "payload.start_date",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.end_date",
                "pt": "msg",
                "to": "payload.end_date",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.description",
                "pt": "msg",
                "to": "payload.description",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.image",
                "pt": "msg",
                "to": "payload.image",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.id",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.category",
                "pt": "msg",
                "to": "payload.category",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.sub-category",
                "pt": "msg",
                "to": "payload.sub-category",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.tags",
                "pt": "msg",
                "to": "payload.tags",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.category-description",
                "pt": "msg",
                "to": "payload.category-description",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.links",
                "pt": "msg",
                "to": "payload.links",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.relationships",
                "pt": "msg",
                "to": "payload.relationships",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.created_date",
                "pt": "msg",
                "to": "payload.created_date",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.updated_date",
                "pt": "msg",
                "to": "payload.updated_date",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.weight",
                "pt": "msg",
                "to": "payload.weight",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "atlas.version",
                "pt": "msg",
                "to": "payload.export_version",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.image_credit",
                "pt": "msg",
                "to": "payload.image_credit",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "node.properties.icon_css_class",
                "pt": "msg",
                "to": "payload.icon_css_class",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 940,
        "wires": [
            [
                "8e81acd0.b111b"
            ]
        ]
    },
    {
        "id": "af48cd5b.2f08e8",
        "type": "function",
        "z": "6940c035.8be64",
        "name": "Parse JSON data",
        "func": "// GEOMETRY\ntry {\n  msg.payload.geometry = JSON.parse(msg.payload.geometry);\n} \ncatch(err){\n    msg.payload.geometry = '';\n}\nif (msg.payload.geometry && msg.payload.geometry.type.length > 0) {\n    msg.topic = \"feature\";\n} else {\n   msg.topic = \"nonGeoFeature\"\n   delete msg.payload.geometry;\n}\n\n// TAGS\ntry {\n  msg.payload.properties[\"tags\"] = JSON.parse(msg.payload.properties[\"tags\"])\n} \ncatch(err) {\n    msg.payload.properties[\"tags\"] = null;\n}\n\n\n// LINKS\ntry {\n  msg.payload.properties.links = JSON.parse(msg.payload.properties.links)\n} \ncatch(err) {\n    msg.payload.properties.links = null;\n}\n\n\n// RELATIONSHIPS\ntry {\n  msg.payload.properties.relationships = JSON.parse(msg.payload.properties.relationships)\n  // collect any relationships into a shared array for later\n  \n  let relationships = flow.get('relationships');\n  msg.payload.properties.relationships.forEach((item)=>{\n      relationships.push({\n      'from': msg.payload.id,\n      'to': item  \n      })\n  flow.set('relationships',relationships)      \n\n  })\n      \n    \n} \ncatch(err) {\n    msg.payload.properties.relationships = null;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 940,
        "wires": [
            [
                "ea3e8e80.1ef1c8"
            ]
        ]
    },
    {
        "id": "758244fc.cc15bc",
        "type": "change",
        "z": "6940c035.8be64",
        "name": "Set up featureCollection object",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "comma.features",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "FeatureCollection",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.features",
                "pt": "msg",
                "to": "comma.features",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 1040,
        "wires": [
            [
                "fd7364b.d151018"
            ]
        ]
    },
    {
        "id": "7b83f36.71d440c",
        "type": "json",
        "z": "6940c035.8be64",
        "name": "Create CommaGeoJson",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 600,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "e08f5105.e041f8",
        "type": "comment",
        "z": "6940c035.8be64",
        "name": "Build a geoJson file for the map",
        "info": "",
        "x": 310,
        "y": 880,
        "wires": []
    },
    {
        "id": "3a63d241.1f1ace",
        "type": "comment",
        "z": "6940c035.8be64",
        "name": "The magic happens here ^^^",
        "info": "",
        "x": 420,
        "y": 980,
        "wires": []
    },
    {
        "id": "a1473840.d065f",
        "type": "function",
        "z": "ec4f312a.87cc08",
        "name": "Set payload and headers",
        "func": "// Set up the header for authentication\nmsg.headers = {};\nmsg.headers['Authorization'] = msg.coda.headers;\n\nconst req = msg.coda.reqStr\n\nlet reqStr;\nfor(var i in req){\n  reqStr = (reqStr === undefined ? i : reqStr + '/' + i); // alerts key\n  reqStr = (req[i] === null ? reqStr + '' : reqStr + '/' + req[i]); //alerts key's value\n}\n\nmsg.url = 'https://coda.io/apis/v1beta1/' + reqStr;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 120,
        "wires": [
            [
                "401ca67.9b13c58"
            ]
        ]
    },
    {
        "id": "401ca67.9b13c58",
        "type": "http request",
        "z": "ec4f312a.87cc08",
        "name": "Get query strings from Coda table",
        "method": "GET",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 320,
        "y": 160,
        "wires": [
            [
                "44a2b5a9.381e34"
            ]
        ]
    },
    {
        "id": "44a2b5a9.381e34",
        "type": "function",
        "z": "ec4f312a.87cc08",
        "name": "Extract value Coda response",
        "func": "// Look for msg.coda.targetElem, which contains a name of a specific column\n// If absent, return the entire values for each row\n\nlet rowVal = [];\nlet i = 0;\n\nif (msg.coda.targetElem !== null) {\n    msg.payload.items.forEach((elem) => {\n        rowVal[i] = elem.values[msg.coda.targetElem];\n        i++;\n    });\n    msg.payload = rowVal;\n}\n\nelse {\n    msg.payload.items.forEach((elem) => {\n        rowVal[i] = elem.values;\n        i++;\n    });\n    msg.payload = rowVal;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "93e4251c.d2ad6",
        "type": "comment",
        "z": "ec4f312a.87cc08",
        "name": "TODO: send a notification if nothing is returned",
        "info": "",
        "x": 640,
        "y": 160,
        "wires": []
    },
    {
        "id": "fd7364b.d151018",
        "type": "join",
        "z": "6940c035.8be64",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1010,
        "y": 1120,
        "wires": [
            [
                "999f4195.dc82"
            ]
        ]
    },
    {
        "id": "ea3e8e80.1ef1c8",
        "type": "switch",
        "z": "6940c035.8be64",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "feature",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nonGeoFeature",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": true,
        "outputs": 2,
        "x": 280,
        "y": 1060,
        "wires": [
            [
                "d9e528f7.7f2de"
            ],
            [
                "432993cc.1db12c"
            ]
        ]
    },
    {
        "id": "d9e528f7.7f2de",
        "type": "join",
        "z": "6940c035.8be64",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 460,
        "y": 1040,
        "wires": [
            [
                "758244fc.cc15bc"
            ]
        ]
    },
    {
        "id": "432993cc.1db12c",
        "type": "join",
        "z": "6940c035.8be64",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 460,
        "y": 1120,
        "wires": [
            [
                "efe5ee94.da638"
            ]
        ]
    },
    {
        "id": "efe5ee94.da638",
        "type": "change",
        "z": "6940c035.8be64",
        "name": "Set up featureCollection object",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "comma.nonGeoFeatures",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "FeatureCollection",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.nonGeoFeatures",
                "pt": "msg",
                "to": "comma.nonGeoFeatures",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 1120,
        "wires": [
            [
                "fd7364b.d151018"
            ]
        ]
    },
    {
        "id": "50d3d92f.59d0c8",
        "type": "function",
        "z": "27b84f51.afdbc8",
        "name": "Get Coda table IDs",
        "func": "let auth = 'Bearer 5834788e-906c-4cbc-a10b-bb2d9b60117d';\n\nlet req = {\n    'docs': msg.payload,\n    'tables': ''\n}\n\nmsg.coda = {};\nmsg.coda.headers = auth;\nmsg.coda.reqStr = req;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 230,
        "y": 220,
        "wires": [
            [
                "66f7091e.a6beb"
            ]
        ]
    },
    {
        "id": "719cb7c0.d39eb8",
        "type": "http request",
        "z": "27b84f51.afdbc8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 260,
        "wires": [
            [
                "1afe6c17.f7cd14"
            ]
        ]
    },
    {
        "id": "66f7091e.a6beb",
        "type": "function",
        "z": "27b84f51.afdbc8",
        "name": "Set payload and headers",
        "func": "// Set up the header for authentication\nmsg.headers = {};\nmsg.headers['Authorization'] = msg.coda.headers;\n\nconst req = msg.coda.reqStr\n\nlet reqStr;\nfor(var i in req){\n  reqStr = (reqStr === undefined ? i : reqStr + '/' + i); // alerts key\n  reqStr = (req[i] === null ? reqStr + '' : reqStr + '/' + req[i]); //alerts key's value\n}\n\nmsg.url = 'https://coda.io/apis/v1beta1/' + reqStr;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 260,
        "wires": [
            [
                "719cb7c0.d39eb8"
            ]
        ]
    },
    {
        "id": "14a9d6dc.274dc1",
        "type": "inject",
        "z": "27b84f51.afdbc8",
        "name": "Enter the doc ID here",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0yINjFYPX-",
        "payloadType": "str",
        "x": 200,
        "y": 180,
        "wires": [
            [
                "50d3d92f.59d0c8"
            ]
        ]
    },
    {
        "id": "1afe6c17.f7cd14",
        "type": "debug",
        "z": "27b84f51.afdbc8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1030,
        "y": 320,
        "wires": []
    },
    {
        "id": "55dae031.d23b98",
        "type": "comment",
        "z": "27b84f51.afdbc8",
        "name": "Get a list of tables in a Coda doc",
        "info": "",
        "x": 210,
        "y": 140,
        "wires": []
    },
    {
        "id": "b912b1c8.cd2fc",
        "type": "coda-io-get-data",
        "z": "965bef54.6134d",
        "limit": "1",
        "request_for": "rows",
        "name": "Get config",
        "x": 300,
        "y": 440,
        "wires": [
            [
                "23b0e22.7dad89e"
            ]
        ]
    },
    {
        "id": "23b0e22.7dad89e",
        "type": "http request",
        "z": "965bef54.6134d",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 490,
        "y": 440,
        "wires": [
            [
                "8fae09ac.6b8ed"
            ]
        ]
    },
    {
        "id": "8fae09ac.6b8ed",
        "type": "json",
        "z": "965bef54.6134d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 150,
        "y": 500,
        "wires": [
            [
                "9abd0be7.404648"
            ]
        ]
    },
    {
        "id": "41b02df5.b7ce7c",
        "type": "change",
        "z": "965bef54.6134d",
        "name": "Set atlas config",
        "rules": [
            {
                "t": "set",
                "p": "atlas.title",
                "pt": "msg",
                "to": "payload.rows[0].title",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "atlas.url",
                "pt": "msg",
                "to": "payload.rows[0].url",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "atlas.id",
                "pt": "msg",
                "to": "payload.rows[0].id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "atlas.description",
                "pt": "msg",
                "to": "payload.rows[0].description",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "atlas.image",
                "pt": "msg",
                "to": "payload.rows[0].image",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "atlas.published",
                "pt": "msg",
                "to": "$now()",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "atlas.links",
                "pt": "msg",
                "to": "payload.rows[0].links",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "headers",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 600,
        "wires": [
            [
                "ec9819c.b9078e8"
            ]
        ]
    },
    {
        "id": "999f4195.dc82",
        "type": "change",
        "z": "6940c035.8be64",
        "name": "Set atlas properties",
        "rules": [
            {
                "t": "set",
                "p": "payload.properties",
                "pt": "msg",
                "to": "atlas",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.properties.taxonomy",
                "pt": "msg",
                "to": "taxonomy",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "comma",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "comma.relationships",
                "pt": "msg",
                "to": "relationships",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 1340,
        "wires": [
            [
                "7b83f36.71d440c",
                "587897e8.cd40d8"
            ]
        ]
    },
    {
        "id": "a3119448.b0d15",
        "type": "comment",
        "z": "6940c035.8be64",
        "name": "Render the CommaJson",
        "info": "",
        "x": 290,
        "y": 1300,
        "wires": []
    },
    {
        "id": "587897e8.cd40d8",
        "type": "debug",
        "z": "6940c035.8be64",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 560,
        "y": 1440,
        "wires": []
    },
    {
        "id": "9f03c94e.8eeda8",
        "type": "debug",
        "z": "6940c035.8be64",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1250,
        "y": 840,
        "wires": []
    },
    {
        "id": "d0c07181.5b6b9",
        "type": "inject",
        "z": "27b84f51.afdbc8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 460,
        "wires": [
            [
                "709e1d91.45b9c4"
            ]
        ]
    },
    {
        "id": "709e1d91.45b9c4",
        "type": "coda-io-connection",
        "z": "27b84f51.afdbc8",
        "bearer_api_token": "513e0f5.52bb77",
        "doc_id": "8c585ff8.333a38",
        "secondary_id": "grid-rFdZvhXJHA",
        "secondary_type": "tables",
        "name": "Atlas Config table",
        "x": 290,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "c4214ac9.3acc88",
        "type": "coda-io-get-data",
        "z": "27b84f51.afdbc8",
        "limit": "1",
        "request_for": "columns",
        "name": "Get columns",
        "x": 310,
        "y": 600,
        "wires": [
            [
                "e11eaa0c.668178"
            ]
        ]
    },
    {
        "id": "d6b374c4.424068",
        "type": "http request",
        "z": "27b84f51.afdbc8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 490,
        "y": 720,
        "wires": [
            [
                "60958ae4.aee594"
            ]
        ]
    },
    {
        "id": "60958ae4.aee594",
        "type": "json",
        "z": "27b84f51.afdbc8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 720,
        "wires": [
            [
                "10c146fb.0e9039"
            ]
        ]
    },
    {
        "id": "f8fdb18d.e3e06",
        "type": "comment",
        "z": "27b84f51.afdbc8",
        "name": "Get a list of columnsin a Coda table",
        "info": "",
        "x": 200,
        "y": 340,
        "wires": []
    },
    {
        "id": "807ba035.3672",
        "type": "inject",
        "z": "27b84f51.afdbc8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 540,
        "wires": [
            [
                "ea9ff001.d8896"
            ]
        ]
    },
    {
        "id": "ea9ff001.d8896",
        "type": "coda-io-connection",
        "z": "27b84f51.afdbc8",
        "bearer_api_token": "513e0f5.52bb77",
        "doc_id": "8c585ff8.333a38",
        "secondary_id": "grid-NatZZ9NxN3",
        "secondary_type": "tables",
        "name": "Atlas Export Table",
        "x": 290,
        "y": 540,
        "wires": [
            [
                "c4214ac9.3acc88"
            ]
        ]
    },
    {
        "id": "8e81acd0.b111b",
        "type": "change",
        "z": "6940c035.8be64",
        "name": "Set payload",
        "rules": [
            {
                "t": "move",
                "p": "node",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 940,
        "wires": [
            [
                "af48cd5b.2f08e8"
            ]
        ]
    },
    {
        "id": "5650bd79.5961ac",
        "type": "function",
        "z": "27b84f51.afdbc8",
        "name": "Coda field mappings",
        "func": "let mapping =flow.get(msg.coda.secondary_id) || 0\nif (!mapping) {\n    mapping = {}\n    msg.payload.items.forEach((column) => {\n        mapping[column.id] = column.name;\n    })\n    flow.set(msg.coda.secondary_id,mapping)\n}\n\nmsg.mapping = mapping; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 660,
        "wires": [
            [
                "7fbeddbc.2ccecc"
            ]
        ]
    },
    {
        "id": "7fbeddbc.2ccecc",
        "type": "change",
        "z": "27b84f51.afdbc8",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "headers",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 660,
        "wires": [
            [
                "7e7d54b5.83ec2c"
            ]
        ]
    },
    {
        "id": "10c146fb.0e9039",
        "type": "function",
        "z": "27b84f51.afdbc8",
        "name": "Create mapped Coda object",
        "func": "mappings = msg.mappings || flow.get(msg.coda.secondary_id)\nif (mappings) {\n    msg.payload.rows = [];\n    msg.payload.items.forEach((item) =>{\n        let row = {}\n        Object.keys(item.values).forEach((col) => {\n          let name = mappings[col];\n            row[name] = item.values[col];    \n        })\n        \n        msg.payload.rows.push(row);\n    })\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 780,
        "wires": [
            [
                "1afe6c17.f7cd14"
            ]
        ]
    },
    {
        "id": "e11eaa0c.668178",
        "type": "http request",
        "z": "27b84f51.afdbc8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 470,
        "y": 600,
        "wires": [
            [
                "41f3b271.1b5fcc"
            ]
        ]
    },
    {
        "id": "41f3b271.1b5fcc",
        "type": "json",
        "z": "27b84f51.afdbc8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 600,
        "wires": [
            [
                "5650bd79.5961ac"
            ]
        ]
    },
    {
        "id": "7e7d54b5.83ec2c",
        "type": "coda-io-get-data",
        "z": "27b84f51.afdbc8",
        "limit": "",
        "request_for": "rows",
        "name": "Get Data",
        "x": 300,
        "y": 720,
        "wires": [
            [
                "d6b374c4.424068"
            ]
        ]
    },
    {
        "id": "3ce985ba.9b74fa",
        "type": "function",
        "z": "6940c035.8be64",
        "name": "Create mapped Coda object",
        "func": "mappings = msg.mappings ||flow.get(msg.coda.secondary_id);\nif (mappings) {\n    msg.payload.rows = [];\n    msg.payload.items.forEach((item) =>{\n        let row = {}\n        Object.keys(item.values).forEach((col) => {\n          let name = mappings[col];\n            row[name] = item.values[col];    \n        })\n        \n        msg.payload.rows.push(row);\n    })\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 700,
        "wires": [
            [
                "a621f7da.74948"
            ]
        ]
    },
    {
        "id": "834bf256.a8898",
        "type": "change",
        "z": "6940c035.8be64",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "headers",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 480,
        "wires": [
            [
                "4828acda.0093dc"
            ]
        ]
    },
    {
        "id": "d6596ef5.9c9758",
        "type": "function",
        "z": "6940c035.8be64",
        "name": "Coda field mappings",
        "func": "    mapping = {}\n    msg.payload.items.forEach((column) => {\n        mapping[column.id] = column.name;\n    })\n    msg.mapping = mapping; \n    flow.set(msg.coda.secondary_id,mapping);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 480,
        "wires": [
            [
                "834bf256.a8898"
            ]
        ]
    },
    {
        "id": "77a7800b.ae30c",
        "type": "json",
        "z": "6940c035.8be64",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 770,
        "y": 420,
        "wires": [
            [
                "d6596ef5.9c9758",
                "7b130547.d5e4bc"
            ]
        ]
    },
    {
        "id": "51e81d7d.ac2474",
        "type": "http request",
        "z": "6940c035.8be64",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 610,
        "y": 420,
        "wires": [
            [
                "77a7800b.ae30c",
                "7b130547.d5e4bc"
            ]
        ]
    },
    {
        "id": "d19d06ed.66b01",
        "type": "coda-io-get-data",
        "z": "6940c035.8be64",
        "limit": "1",
        "request_for": "columns",
        "name": "Get columns",
        "x": 450,
        "y": 420,
        "wires": [
            [
                "51e81d7d.ac2474"
            ]
        ]
    },
    {
        "id": "3c4259fb.cd1cee",
        "type": "comment",
        "z": "6940c035.8be64",
        "name": "Get table structure",
        "info": "",
        "x": 470,
        "y": 380,
        "wires": []
    },
    {
        "id": "812cfbe.1623a88",
        "type": "comment",
        "z": "6940c035.8be64",
        "name": "Get table data",
        "info": "",
        "x": 450,
        "y": 600,
        "wires": []
    },
    {
        "id": "78641d02.c990dc",
        "type": "change",
        "z": "965bef54.6134d",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "headers",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 340,
        "wires": [
            [
                "b912b1c8.cd2fc"
            ]
        ]
    },
    {
        "id": "e0e0531b.622f4",
        "type": "function",
        "z": "965bef54.6134d",
        "name": "Coda field mappings",
        "func": "    // always reset in case tables have changes\n    mapping = {}\n    msg.payload.items.forEach((column) => {\n        mapping[column.id] = column.name;\n    })\n    flow.set(msg.coda.secondary_id,mapping);\n    msg.mapping = mapping; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 310,
        "y": 340,
        "wires": [
            [
                "78641d02.c990dc"
            ]
        ]
    },
    {
        "id": "ea313966.cb9ec8",
        "type": "json",
        "z": "965bef54.6134d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 600,
        "y": 280,
        "wires": [
            [
                "e0e0531b.622f4",
                "56ff10c0.96e8a"
            ]
        ]
    },
    {
        "id": "7c1c490f.8504a",
        "type": "http request",
        "z": "965bef54.6134d",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 440,
        "y": 280,
        "wires": [
            [
                "ea313966.cb9ec8"
            ]
        ]
    },
    {
        "id": "77694ad.847ef34",
        "type": "coda-io-get-data",
        "z": "965bef54.6134d",
        "limit": "1",
        "request_for": "columns",
        "name": "Get columns",
        "x": 280,
        "y": 280,
        "wires": [
            [
                "7c1c490f.8504a"
            ]
        ]
    },
    {
        "id": "15727f56.aebeb9",
        "type": "comment",
        "z": "965bef54.6134d",
        "name": "Get table structure",
        "info": "",
        "x": 300,
        "y": 240,
        "wires": []
    },
    {
        "id": "9abd0be7.404648",
        "type": "function",
        "z": "965bef54.6134d",
        "name": "Create mapped Coda object",
        "func": "let mappings = msg.mappings ||  flow.get(msg.coda.secondary_id);\nif (mappings) {\n    msg.payload.rows = [];\n    msg.payload.items.forEach((item) =>{\n        let row = {}\n        Object.keys(item.values).forEach((col) => {\n          let name = mappings[col];\n            row[name] = item.values[col];    \n        })\n        msg.payload.rows.push(row);\n    })\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 500,
        "wires": [
            [
                "41b02df5.b7ce7c",
                "4cfbe7a3.2613e8"
            ]
        ]
    },
    {
        "id": "7b130547.d5e4bc",
        "type": "debug",
        "z": "6940c035.8be64",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1200,
        "y": 640,
        "wires": []
    },
    {
        "id": "4cfbe7a3.2613e8",
        "type": "debug",
        "z": "965bef54.6134d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 880,
        "y": 480,
        "wires": []
    },
    {
        "id": "ec9819c.b9078e8",
        "type": "function",
        "z": "965bef54.6134d",
        "name": "Parse JSON values",
        "func": "try {\n  msg.atlas.links = JSON.parse(msg.atlas.links);\n} \ncatch(err){\n    msg.atlas.links = [];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "5edcc45a.ee21fc",
        "type": "coda-io-get-data",
        "z": "1321a474.225144",
        "limit": "500",
        "request_for": "rows",
        "name": "Get taxonony",
        "x": 330,
        "y": 300,
        "wires": [
            [
                "377a0ae.b6947f6"
            ]
        ]
    },
    {
        "id": "377a0ae.b6947f6",
        "type": "http request",
        "z": "1321a474.225144",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 510,
        "y": 300,
        "wires": [
            [
                "71981819.9b0df"
            ]
        ]
    },
    {
        "id": "71981819.9b0df",
        "type": "json",
        "z": "1321a474.225144",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 170,
        "y": 360,
        "wires": [
            [
                "91cf44b7.9fbd68"
            ]
        ]
    },
    {
        "id": "baa4ec5e.8b7968",
        "type": "change",
        "z": "1321a474.225144",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "headers",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 200,
        "wires": [
            [
                "5edcc45a.ee21fc"
            ]
        ]
    },
    {
        "id": "3be67400.e5ad14",
        "type": "function",
        "z": "1321a474.225144",
        "name": "Coda field mappings",
        "func": "    // always reset in case tables have changes\n    mapping = {}\n    msg.payload.items.forEach((column) => {\n        mapping[column.id] = column.name;\n    })\n    flow.set(msg.coda.secondary_id,mapping);\n    msg.mapping = mapping; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 330,
        "y": 200,
        "wires": [
            [
                "baa4ec5e.8b7968"
            ]
        ]
    },
    {
        "id": "b467d74a.20c33",
        "type": "json",
        "z": "1321a474.225144",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 620,
        "y": 140,
        "wires": [
            [
                "3be67400.e5ad14"
            ]
        ]
    },
    {
        "id": "78a39f3e.68066",
        "type": "http request",
        "z": "1321a474.225144",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 460,
        "y": 140,
        "wires": [
            [
                "b467d74a.20c33"
            ]
        ]
    },
    {
        "id": "2e966749.962748",
        "type": "coda-io-get-data",
        "z": "1321a474.225144",
        "limit": "1",
        "request_for": "columns",
        "name": "Get columns",
        "x": 300,
        "y": 140,
        "wires": [
            [
                "78a39f3e.68066"
            ]
        ]
    },
    {
        "id": "5c431392.1c15e4",
        "type": "comment",
        "z": "1321a474.225144",
        "name": "Get table structure",
        "info": "",
        "x": 320,
        "y": 100,
        "wires": []
    },
    {
        "id": "91cf44b7.9fbd68",
        "type": "function",
        "z": "1321a474.225144",
        "name": "Create mapped Coda object",
        "func": "let mappings = msg.mappings ||  flow.get(msg.coda.secondary_id);\nif (mappings) {\n    msg.payload.rows = [];\n    msg.payload.items.forEach((item) =>{\n        let row = {}\n        Object.keys(item.values).forEach((col) => {\n          let name = mappings[col];\n            row[name] = item.values[col];    \n        })\n        msg.payload.rows.push(row);\n    })\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 360,
        "wires": [
            [
                "8eabf696.863ec8",
                "d7a0b82.d24e3c8"
            ]
        ]
    },
    {
        "id": "8eabf696.863ec8",
        "type": "debug",
        "z": "1321a474.225144",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 730,
        "y": 360,
        "wires": []
    },
    {
        "id": "ab62f3be.8b3a7",
        "type": "function",
        "z": "1321a474.225144",
        "name": "Parse JSON values",
        "func": "try {\n  msg.payload[\"sub-categories\"] = JSON.parse(msg.payload[\"sub-categories\"]);\n} \ncatch(err){\n    msg.payload[\"sub-categories\"] = [];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 440,
        "wires": [
            [
                "47e1b8ff.417d3"
            ]
        ]
    },
    {
        "id": "b5477023.aa1b18",
        "type": "split",
        "z": "1321a474.225144",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 370,
        "y": 440,
        "wires": [
            [
                "ab62f3be.8b3a7"
            ]
        ]
    },
    {
        "id": "d7a0b82.d24e3c8",
        "type": "change",
        "z": "1321a474.225144",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.rows",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 440,
        "wires": [
            [
                "b5477023.aa1b18"
            ]
        ]
    },
    {
        "id": "47e1b8ff.417d3",
        "type": "join",
        "z": "1321a474.225144",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 790,
        "y": 440,
        "wires": [
            [
                "e23bc4b5.7614a8"
            ]
        ]
    },
    {
        "id": "e23bc4b5.7614a8",
        "type": "change",
        "z": "1321a474.225144",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "taxonomy",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 440,
        "wires": [
            [
                "b76114e4.3cc6f8"
            ]
        ]
    },
    {
        "id": "b76114e4.3cc6f8",
        "type": "debug",
        "z": "1321a474.225144",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1250,
        "y": 500,
        "wires": []
    },
    {
        "id": "6ed96457.779f5c",
        "type": "http in",
        "z": "828c4e44.4d8d68",
        "name": "Request geoJson",
        "url": "/export/:docId/atlas.json",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "1c07305c.ddb4"
            ]
        ]
    },
    {
        "id": "a50ae3c6.1b15",
        "type": "github-repo",
        "z": "828c4e44.4d8d68",
        "github": "93031114.a56d6",
        "name": "Update gitHubGeoJson",
        "username": "Comensi",
        "usernameType": "str",
        "repository": "atlases",
        "repositoryType": "str",
        "action": "write",
        "branch": "master",
        "branchType": "str",
        "path": "outputFile",
        "pathType": "msg",
        "pathto": "",
        "pathtoType": "str",
        "contents": "payload",
        "contentsType": "msg",
        "outputs": "0",
        "x": 1080,
        "y": 860,
        "wires": []
    },
    {
        "id": "2425e916.fefa3e",
        "type": "coda-io-connection",
        "z": "7cc4b1a6.f5775",
        "bearer_api_token": "513e0f5.52bb77",
        "doc_id": "9a3bc995.0eac1",
        "secondary_id": "atlasConfig",
        "secondary_type": "tables",
        "name": "Init coda config",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "ee70ebab.bf465"
            ]
        ]
    },
    {
        "id": "feb8102a.b28e88",
        "type": "inject",
        "z": "828c4e44.4d8d68",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 520,
        "wires": [
            [
                "5de10127.b1cd5"
            ]
        ]
    },
    {
        "id": "f16069c6.b31cc8",
        "type": "subflow:6940c035.8be64",
        "z": "7cc4b1a6.f5775",
        "name": "",
        "env": [],
        "x": 620,
        "y": 160,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "e8d7ae10.38b9b",
        "type": "subflow:965bef54.6134d",
        "z": "7cc4b1a6.f5775",
        "name": "",
        "env": [],
        "x": 210,
        "y": 160,
        "wires": [
            [
                "d5a716c3.accd"
            ]
        ]
    },
    {
        "id": "de73a832.1b4eb8",
        "type": "http response",
        "z": "828c4e44.4d8d68",
        "name": "Done",
        "statusCode": "200",
        "headers": {
            "location": "https://palermo.community-atlas.net"
        },
        "x": 1190,
        "y": 920,
        "wires": []
    },
    {
        "id": "66c71640.155ab8",
        "type": "template",
        "z": "828c4e44.4d8d68",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<h1>Atlas has been published</h1>\n<p>There may be a minute or two before the data is available.</p>\n<p>Browse the public atlas at <A href=\"{{atlas.url}}\">{{atlas.url}}</A>.</p>\n<p></p>\n<p>{{publish}}</p>",
        "output": "str",
        "x": 1040,
        "y": 920,
        "wires": [
            [
                "de73a832.1b4eb8"
            ]
        ]
    },
    {
        "id": "d5a716c3.accd",
        "type": "subflow:1321a474.225144",
        "z": "7cc4b1a6.f5775",
        "name": "",
        "env": [],
        "x": 420,
        "y": 160,
        "wires": [
            [
                "f16069c6.b31cc8"
            ]
        ]
    },
    {
        "id": "d16fc462.b414f",
        "type": "change",
        "z": "828c4e44.4d8d68",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "outputFile",
                "pt": "msg",
                "to": "atlas.id & '-' & coda.doc_id & '.geojson'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 860,
        "wires": [
            [
                "a50ae3c6.1b15",
                "66c71640.155ab8"
            ]
        ]
    },
    {
        "id": "ee70ebab.bf465",
        "type": "change",
        "z": "7cc4b1a6.f5775",
        "name": "Set document id based on request",
        "rules": [
            {
                "t": "set",
                "p": "coda.doc_id",
                "pt": "msg",
                "to": "req.params.docId",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 80,
        "wires": [
            [
                "e8d7ae10.38b9b",
                "89538f9d.7ff97"
            ]
        ]
    },
    {
        "id": "14f951be.e66cae",
        "type": "change",
        "z": "1321a474.225144",
        "name": "taxonomy table",
        "rules": [
            {
                "t": "set",
                "p": "coda.secondary_id",
                "pt": "msg",
                "to": "Export-CommaTaxonomy",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 60,
        "wires": [
            [
                "2e966749.962748"
            ]
        ]
    },
    {
        "id": "d60ca0fa.18c2d",
        "type": "change",
        "z": "6940c035.8be64",
        "name": "select export table",
        "rules": [
            {
                "t": "set",
                "p": "coda.secondary_id",
                "pt": "msg",
                "to": "Export-CommaGeoJson",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 280,
        "wires": [
            [
                "d19d06ed.66b01",
                "89c7c198.bc1d5"
            ]
        ]
    },
    {
        "id": "a84bd229.bc2d08",
        "type": "change",
        "z": "965bef54.6134d",
        "name": "select config table",
        "rules": [
            {
                "t": "set",
                "p": "coda.secondary_id",
                "pt": "msg",
                "to": "atlasConfig",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 180,
        "wires": [
            [
                "77694ad.847ef34",
                "56ff10c0.96e8a"
            ]
        ]
    },
    {
        "id": "344e5c66.9b69a4",
        "type": "function",
        "z": "828c4e44.4d8d68",
        "name": "Check expected atlas version",
        "func": "let maxRetry = 2;\nlet retryMsg = null;\nlet versionMatch = true;\nlet featureMatch = true;\n\n\nif (msg.req.query && msg.req.query.version) versionMatch = msg.req.query.version == msg.atlas.version;\nif (msg.req.query && msg.req.query.count) {\n    let featureCount = 0 ;\n    if (msg.comma.features) featureCount = msg.comma.features.length;\n    if (msg.comma.nonGeoFeatures) featureCount +=  msg.comma.nonGeoFeatures.length;\n    featureMatch =  msg.req.query.count == featureCount   \n    node.warn(\"feature count:\" + featureCount);\n}\n\n\nif ((!versionMatch || !featureMatch)) {\n    if (!msg.retryCount) {\n        msg.retryCount=0;\n    }\n    node.warn(\"Version match: \" + versionMatch);\n    node.warn(\"Feature Match:\" + featureMatch);\n    if ( ++msg.retryCount <= maxRetry) {\n        retryMsg = msg;\n        retryMsg.atlas = {}\n        retryMsg.payload = {}\n        msg = null;\n        node.warn('Retrying')\n    } else {\n        node.error('Publishing failed.')\n        msg.publish = 'There were some issues with the publish process. You may need to try again.'\n    }\n}\n\n\n\nreturn [msg, retryMsg];",
        "outputs": 2,
        "noerr": 0,
        "x": 400,
        "y": 860,
        "wires": [
            [
                "d16fc462.b414f",
                "d8c03953.238b68"
            ],
            [
                "1c07305c.ddb4"
            ]
        ]
    },
    {
        "id": "1c07305c.ddb4",
        "type": "delay",
        "z": "828c4e44.4d8d68",
        "name": "Wait 5 seconds to give coda API time",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 410,
        "y": 580,
        "wires": [
            [
                "5de10127.b1cd5"
            ]
        ]
    },
    {
        "id": "73b5c85c.3b7cb8",
        "type": "http in",
        "z": "58282c51.000474",
        "name": "Complex geo incoming",
        "url": "/complex/:docId/:featureId",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 60,
        "wires": [
            [
                "7ed6e21e.1959cc"
            ]
        ]
    },
    {
        "id": "2b7c4438.631e5c",
        "type": "debug",
        "z": "58282c51.000474",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "a875a84.56b5f58",
        "type": "coda-io-connection",
        "z": "58282c51.000474",
        "bearer_api_token": "513e0f5.52bb77",
        "doc_id": "9a3bc995.0eac1",
        "secondary_id": "grid-avT8Q1UnRR",
        "secondary_type": "tables",
        "name": "Base connection setup",
        "x": 380,
        "y": 240,
        "wires": [
            [
                "77c9196d.90c978"
            ]
        ]
    },
    {
        "id": "9f20f0e8.9e3ef",
        "type": "function",
        "z": "58282c51.000474",
        "name": "Upsert data format",
        "func": "let keyColumn = \"c-y_Fvy4HuE2\"\nlet latColumn = \"c-zZkQo2XRfD\"\nlet lngColumn = \"c-NeDDCZ7jBg\"\n\n\nfeatureId = msg.geo.featureId;\ncoordinates = msg.geo.coordinates;\n/*\nlet featureId = \"Test 2\"\nlet coordinates = [\n   [-22.11251,29.22889],\n   [-22.11251,58.077876],\n   [26.068884,58.077876],\n   [26.068884,29.22889],\n   [-22.11251,29.22889]\n  ];\n*/\nmsg.payload = {\n    'rows': coordinates.map(coord => {\n        return {\n            'cells': [\n                {\n                    'column': keyColumn,\n                    'value': featureId,\n                },\n                {\n                    'column': latColumn,\n                    'value': coord[1],\n                },\n                {\n                    'column': lngColumn,\n                    'value': coord[0],\n                },\n            ]\n        }\n    }),\n    //'keyColumns': [ keyColumn ],\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 210,
        "y": 380,
        "wires": [
            [
                "b20db65b.b09c68",
                "2b7c4438.631e5c"
            ]
        ]
    },
    {
        "id": "b20db65b.b09c68",
        "type": "function",
        "z": "58282c51.000474",
        "name": "Upsert prep",
        "func": "msg.url = `https://coda.io/apis/v1/docs/${msg.coda.doc_id}/tables/${msg.coda.secondary_id}/rows`\n// reset the headers\nmsg.headers = { \n    Authorization: msg.coda.headerBearer \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 430,
        "y": 380,
        "wires": [
            [
                "f87ac16f.c65db"
            ]
        ]
    },
    {
        "id": "77c9196d.90c978",
        "type": "change",
        "z": "58282c51.000474",
        "name": "Set geodata doc and table  ",
        "rules": [
            {
                "t": "set",
                "p": "coda.doc_id",
                "pt": "msg",
                "to": "req.params.docId",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "coda.secondary_id",
                "pt": "msg",
                "to": "grid-yx6W7uGG2N",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 240,
        "wires": [
            [
                "9f20f0e8.9e3ef"
            ]
        ]
    },
    {
        "id": "f87ac16f.c65db",
        "type": "http request",
        "z": "58282c51.000474",
        "name": "Send data to coda",
        "method": "POST",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 670,
        "y": 380,
        "wires": [
            [
                "2b7c4438.631e5c"
            ]
        ]
    },
    {
        "id": "c4ec6c6a.335d1",
        "type": "inject",
        "z": "58282c51.000474",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "a875a84.56b5f58"
            ]
        ]
    },
    {
        "id": "7ed6e21e.1959cc",
        "type": "function",
        "z": "58282c51.000474",
        "name": "Extract Coordinates",
        "func": "let geoData = JSON.parse(msg.payload);\nlet coordinates = geoData.features[0].geometry.coordinates\nlet type = geoData.features[0].geometry.type;\nswitch(type) {\n  case \"Point\": \n      coordinates = [coordinates];\n      break;\n  case \"LineString\":\n      coordinates = coordinates;\n      break;\n   case \"Polygon\":\n      coordinates = coordinates[0];\n      break;\n  default: \n     coordinates = null;\n}\n\nif (coordinates) {\n    msg.geo = {\n      coordinates : coordinates,\n      featureId : decodeURIComponent(msg.req.params.featureId)\n    }\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 60,
        "wires": [
            [
                "a875a84.56b5f58"
            ]
        ]
    },
    {
        "id": "fc371ce4.c8eb4",
        "type": "function",
        "z": "58282c51.000474",
        "name": "Set up search query",
        "func": "let featureId = msg.geo.featureId\nmsg.payload = {\n    query : `c-y_Fvy4HuE2:\"${featureId}\"`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 160,
        "y": 860,
        "wires": [
            [
                "c8b8be34.a2bc4"
            ]
        ]
    },
    {
        "id": "c8b8be34.a2bc4",
        "type": "http request",
        "z": "58282c51.000474",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": true,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 370,
        "y": 860,
        "wires": [
            [
                "388187ea.a80d38"
            ]
        ]
    },
    {
        "id": "388187ea.a80d38",
        "type": "json",
        "z": "58282c51.000474",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 530,
        "y": 860,
        "wires": [
            [
                "5ea5294c.593208"
            ]
        ]
    },
    {
        "id": "5ea5294c.593208",
        "type": "switch",
        "z": "58282c51.000474",
        "name": "Do we need to delete?",
        "property": "$count(payload.items)\t",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 720,
        "y": 860,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c0591ee3.dd9d9",
        "type": "comment",
        "z": "58282c51.000474",
        "name": "Why we can't delete",
        "info": "We can't test to see if there are any items in the tables because the API data has too much lag. \n\nWe cannot prevent multiple inserts by checking the table content because we will not detect any recent api inserts. ",
        "x": 150,
        "y": 820,
        "wires": []
    },
    {
        "id": "1f8459b9.41feb6",
        "type": "http in",
        "z": "604b08c8.c34b58",
        "name": "",
        "url": "/monitor",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "ca796a0a.b04fb8"
            ]
        ]
    },
    {
        "id": "6e953d42.8049e4",
        "type": "http response",
        "z": "604b08c8.c34b58",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 480,
        "y": 120,
        "wires": []
    },
    {
        "id": "ca796a0a.b04fb8",
        "type": "function",
        "z": "604b08c8.c34b58",
        "name": "",
        "func": "msg.payload = 'OK'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 120,
        "wires": [
            [
                "6e953d42.8049e4"
            ]
        ]
    },
    {
        "id": "57d4d2f4.23c59c",
        "type": "split",
        "z": "828c4e44.4d8d68",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 1200,
        "wires": [
            [
                "73e022bc.90d46c"
            ]
        ]
    },
    {
        "id": "73e022bc.90d46c",
        "type": "change",
        "z": "828c4e44.4d8d68",
        "name": "Move properties into main payload",
        "rules": [
            {
                "t": "set",
                "p": "payload.properties.id",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.properties",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 1200,
        "wires": [
            [
                "652aa47a.ecec0c",
                "9f9bcf7b.54497"
            ]
        ]
    },
    {
        "id": "652aa47a.ecec0c",
        "type": "join",
        "z": "828c4e44.4d8d68",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 930,
        "y": 1200,
        "wires": [
            [
                "36fcae93.488dc2"
            ]
        ]
    },
    {
        "id": "fa663483.f28988",
        "type": "function",
        "z": "828c4e44.4d8d68",
        "name": "Create single feature array",
        "func": "msg.payload = []\nmsg.payload = msg.payload.concat(msg.comma.features)\nmsg.payload = msg.payload.concat(msg.comma.nonGeoFeatures)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 1200,
        "wires": [
            [
                "57d4d2f4.23c59c",
                "9f9bcf7b.54497"
            ]
        ]
    },
    {
        "id": "36fcae93.488dc2",
        "type": "change",
        "z": "828c4e44.4d8d68",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "elements",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.elements",
                "pt": "msg",
                "to": "elements",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.connections",
                "pt": "msg",
                "to": "comma.relationships",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 1260,
        "wires": [
            [
                "7cd67999.292948",
                "9f9bcf7b.54497"
            ]
        ]
    },
    {
        "id": "7cd67999.292948",
        "type": "json",
        "z": "828c4e44.4d8d68",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 450,
        "y": 1260,
        "wires": [
            [
                "ef023d2c.81dd8"
            ]
        ]
    },
    {
        "id": "ef023d2c.81dd8",
        "type": "change",
        "z": "828c4e44.4d8d68",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "outputFile",
                "pt": "msg",
                "to": "atlas.id & '-' & coda.doc_id & '.kumu.json'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 1260,
        "wires": [
            [
                "6b7131b2.c02c4",
                "9f9bcf7b.54497"
            ]
        ]
    },
    {
        "id": "6b7131b2.c02c4",
        "type": "github-repo",
        "z": "828c4e44.4d8d68",
        "github": "93031114.a56d6",
        "name": "Update gitHubGeoJson",
        "username": "Comensi",
        "usernameType": "str",
        "repository": "atlases",
        "repositoryType": "str",
        "action": "write",
        "branch": "master",
        "branchType": "str",
        "path": "outputFile",
        "pathType": "msg",
        "pathto": "",
        "pathtoType": "str",
        "contents": "payload",
        "contentsType": "msg",
        "outputs": "0",
        "x": 910,
        "y": 1260,
        "wires": []
    },
    {
        "id": "deb50889.e87778",
        "type": "comment",
        "z": "828c4e44.4d8d68",
        "name": "Export nodes to Kumu",
        "info": "",
        "x": 200,
        "y": 1120,
        "wires": []
    },
    {
        "id": "9f9bcf7b.54497",
        "type": "debug",
        "z": "828c4e44.4d8d68",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 1100,
        "wires": []
    },
    {
        "id": "d8c03953.238b68",
        "type": "delay",
        "z": "828c4e44.4d8d68",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 800,
        "y": 1020,
        "wires": [
            [
                "fa663483.f28988"
            ]
        ]
    },
    {
        "id": "5de10127.b1cd5",
        "type": "subflow:7cc4b1a6.f5775",
        "z": "828c4e44.4d8d68",
        "name": "Generate GeoJson",
        "env": [],
        "x": 610,
        "y": 680,
        "wires": [
            [
                "344e5c66.9b69a4"
            ]
        ]
    },
    {
        "id": "7e8fde7a.b1af",
        "type": "http in",
        "z": "828c4e44.4d8d68",
        "name": "Get live geojson",
        "url": "/preview/:docId/atlas.json",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 830,
        "y": 420,
        "wires": [
            [
                "c97ac2c4.4d36b"
            ]
        ]
    },
    {
        "id": "c97ac2c4.4d36b",
        "type": "subflow:7cc4b1a6.f5775",
        "z": "828c4e44.4d8d68",
        "name": "Generate GeoJson",
        "env": [],
        "x": 1050,
        "y": 420,
        "wires": [
            [
                "8a173faa.91547"
            ]
        ]
    },
    {
        "id": "8a173faa.91547",
        "type": "http response",
        "z": "828c4e44.4d8d68",
        "name": "GeoJson Content",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1270,
        "y": 420,
        "wires": []
    },
    {
        "id": "89538f9d.7ff97",
        "type": "debug",
        "z": "7cc4b1a6.f5775",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 940,
        "y": 100,
        "wires": []
    },
    {
        "id": "89c7c198.bc1d5",
        "type": "debug",
        "z": "6940c035.8be64",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 820,
        "y": 240,
        "wires": []
    },
    {
        "id": "56ff10c0.96e8a",
        "type": "debug",
        "z": "965bef54.6134d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 950,
        "y": 180,
        "wires": []
    }
]